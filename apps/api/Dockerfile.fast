# syntax=docker/dockerfile:1.4

## Build stage
FROM oven/bun:1-alpine AS base
WORKDIR /app

# Install OS deps needed for Prisma engines
RUN apk add --no-cache openssl

## Builder stage: install deps and build only API
FROM base AS builder

# Copy ONLY dependency files first for better caching
COPY package.json package-lock.json bun.lock ./
COPY apps/api/package.json ./apps/api/package.json
COPY apps/web/package.json ./apps/web/package.json
COPY libs/config/package.json ./libs/config/package.json
COPY libs/types/package.json ./libs/types/package.json
COPY tsconfig.base.json tsconfig.json ./

# Install dependencies with cache mount (ultra-fast!)
RUN --mount=type=cache,target=/root/.bun/install/cache \
    bun install

# NOW copy source code (changes here won't bust the install cache)
COPY libs ./libs
COPY apps/api ./apps/api

# Generate Prisma client
WORKDIR /app
RUN bunx nx build @yellow-book/api --configuration=production && \
    bunx nx run @yellow-book/api:prune

## Production dependencies for API only
FROM base AS prod-deps
WORKDIR /app
COPY apps/api/package.json ./package.json
RUN --mount=type=cache,target=/root/.bun/install/cache \
    bun install --production
COPY apps/api/prisma ./prisma
RUN bunx prisma generate

## Runtime stage
FROM oven/bun:1-alpine AS runner
WORKDIR /app

# Set NODE_ENV
ENV NODE_ENV=production

# Copy built output
COPY --from=builder /app/dist/apps/api ./
COPY --from=prod-deps /app/node_modules ./node_modules
COPY --from=prod-deps /app/package.json ./package.json

EXPOSE 3001

# Start Fastify app
CMD ["bun", "main.js"]

