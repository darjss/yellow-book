name: Deploy to Production (Enhanced)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Run tests first
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - run: bun install --no-cache
      - run: bun nx run-many -t lint test build typecheck

  # Deploy only if tests pass
  deploy:
    name: Deploy to Server
    needs: test
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://${{ secrets.SERVER_HOST }}
    
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ Starting deployment..."
            cd ${{ secrets.PROJECT_PATH || '~/yellow-book' }}
            
            # Backup current state
            echo "üíæ Creating backup..."
            BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            docker compose ps > $BACKUP_DIR/containers.txt || true
            
            # Pull latest changes
            echo "üì¶ Pulling latest changes..."
            git fetch origin main
            CURRENT_COMMIT=$(git rev-parse HEAD)
            git pull origin main
            NEW_COMMIT=$(git rev-parse HEAD)
            
            if [ "$CURRENT_COMMIT" = "$NEW_COMMIT" ]; then
              echo "‚ö†Ô∏è  No new changes to deploy"
              exit 0
            fi
            
            echo "üìù Deploying commit: $NEW_COMMIT"
            
            # Rebuild and restart
            echo "üî® Rebuilding containers..."
            docker compose up --build -d
            
            # Wait for services to be healthy
            echo "‚è≥ Waiting for services to start..."
            sleep 10
            
            # Check if services are running
            if docker compose ps | grep -q "Up"; then
              echo "‚úÖ Deployment successful!"
              docker compose ps
              
              # Clean up old images
              echo "üßπ Cleaning up..."
              docker image prune -f
            else
              echo "‚ùå Deployment failed! Rolling back..."
              git reset --hard $CURRENT_COMMIT
              docker compose up --build -d
              exit 1
            fi
            
      - name: Notify on failure
        if: failure()
        run: echo "‚ùå Deployment failed! Check logs at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

